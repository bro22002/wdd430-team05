// scripts/diagnoseAuthIssue.js
// Script para diagnosticar problemas de autenticaci√≥n y conexi√≥n con Supabase

require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

console.log('üîç DIAGN√ìSTICO DE AUTENTICACI√ìN Y CONEXI√ìN\n');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

// Funci√≥n para verificar si una URL es v√°lida
function isValidUrl(string) {
  try {
    new URL(string);
    return true;
  } catch (_) {
    return false;
  }
}

async function diagnoseAuth() {
  // ===== 1. VERIFICAR VARIABLES DE ENTORNO =====
  console.log('1Ô∏è‚É£ Verificando variables de entorno...\n');
  
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

  if (!supabaseUrl) {
    console.error('‚ùå ERROR: NEXT_PUBLIC_SUPABASE_URL no est√° definida');
    console.log('üí° SOLUCI√ìN: Crea un archivo .env.local con:');
    console.log('   NEXT_PUBLIC_SUPABASE_URL=https://tu-proyecto.supabase.co');
    console.log('   NEXT_PUBLIC_SUPABASE_ANON_KEY=tu-clave-anon\n');
    return;
  }

  if (!supabaseKey) {
    console.error('‚ùå ERROR: NEXT_PUBLIC_SUPABASE_ANON_KEY no est√° definida');
    console.log('üí° SOLUCI√ìN: Agrega la clave en .env.local\n');
    return;
  }

  console.log('‚úÖ Variables de entorno encontradas');
  console.log(`   URL: ${supabaseUrl}`);
  console.log(`   Key: ${supabaseKey.substring(0, 20)}...${supabaseKey.slice(-10)}\n`);

  // Verificar formato de URL
  if (!isValidUrl(supabaseUrl)) {
    console.error('‚ùå ERROR: La URL de Supabase no es v√°lida');
    console.log('üí° SOLUCI√ìN: La URL debe tener el formato:');
    console.log('   https://tunombre.supabase.co\n');
    return;
  }

  console.log('‚úÖ Formato de URL v√°lido\n');

  // ===== 2. CREAR CLIENTE DE SUPABASE =====
  console.log('2Ô∏è‚É£ Creando cliente de Supabase...\n');
  
  let supabase;
  try {
    supabase = createClient(supabaseUrl, supabaseKey, {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
      }
    });
    console.log('‚úÖ Cliente creado exitosamente\n');
  } catch (error) {
    console.error('‚ùå ERROR al crear cliente:', error.message);
    return;
  }

  // ===== 3. VERIFICAR CONEXI√ìN A LA BASE DE DATOS =====
  console.log('3Ô∏è‚É£ Verificando conexi√≥n a la base de datos...\n');
  
  try {
    const { data, error } = await supabase
      .from('products')
      .select('count')
      .limit(1);
    
    if (error) {
      console.error('‚ùå ERROR de conexi√≥n a la BD:', error.message);
      console.log('\nüí° POSIBLES SOLUCIONES:');
      console.log('   1. Verifica que la URL de Supabase sea correcta');
      console.log('   2. Verifica que la clave ANON sea correcta');
      console.log('   3. Verifica que la tabla "products" exista\n');
      return;
    }
    
    console.log('‚úÖ Conexi√≥n a la base de datos exitosa\n');
  } catch (err) {
    console.error('‚ùå ERROR fatal de conexi√≥n:', err.message);
    console.log('\nüí° POSIBLES CAUSAS:');
    console.log('   - Problemas de red o firewall');
    console.log('   - URL de Supabase incorrecta');
    console.log('   - Proyecto de Supabase pausado o eliminado\n');
    return;
  }

  // ===== 4. VERIFICAR SESI√ìN ACTUAL =====
  console.log('4Ô∏è‚É£ Verificando sesi√≥n de usuario...\n');
  
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('‚ùå ERROR al obtener sesi√≥n:', error.message);
      console.log('\nüí° SOLUCI√ìN:');
      console.log('   Este error indica un problema con la autenticaci√≥n');
      console.log('   Intenta cerrar sesi√≥n y volver a iniciar\n');
      return;
    }

    if (!session) {
      console.log('‚ö†Ô∏è  No hay sesi√≥n activa (usuario no logueado)');
      console.log('üí° Esto es normal si no has iniciado sesi√≥n en la app\n');
    } else {
      console.log('‚úÖ Sesi√≥n activa encontrada');
      console.log(`   Usuario: ${session.user.email}`);
      console.log(`   ID: ${session.user.id}\n`);
    }
  } catch (err) {
    console.error('‚ùå ERROR al verificar sesi√≥n:', err.message);
    console.log('\nüí° ESTE ES PROBABLEMENTE TU PROBLEMA:');
    console.log('   El error "Failed to fetch" indica que:');
    console.log('   1. La URL de Supabase no es accesible');
    console.log('   2. Hay un problema de CORS');
    console.log('   3. La clave ANON es incorrecta\n');
    return;
  }

  // ===== 5. VERIFICAR USUARIO ACTUAL =====
  console.log('5Ô∏è‚É£ Verificando usuario actual (m√©todo getUser)...\n');
  
  try {
    const { data: { user }, error } = await supabase.auth.getUser();
    
    if (error) {
      console.error('‚ùå ERROR:', error.message);
      console.log('\nüí° SOLUCI√ìN:');
      
      if (error.message.includes('Failed to fetch') || error.message.includes('fetch')) {
        console.log('   üî¥ PROBLEMA ENCONTRADO: Error de conexi√≥n al servidor auth');
        console.log('   ');
        console.log('   CAUSAS POSIBLES:');
        console.log('   1. La URL de Supabase est√° mal escrita en .env.local');
        console.log('   2. Tu proyecto de Supabase est√° pausado');
        console.log('   3. Problemas de red o firewall');
        console.log('   ');
        console.log('   VERIFICA:');
        console.log('   - Ve a https://supabase.com/dashboard');
        console.log('   - Aseg√∫rate que tu proyecto est√© activo');
        console.log('   - Copia nuevamente la URL y la clave ANON');
        console.log('   - P√©galas en .env.local');
        console.log('   - Reinicia el servidor (npm run dev)\n');
      }
      return;
    }

    if (!user) {
      console.log('‚ö†Ô∏è  No hay usuario logueado');
      console.log('üí° Inicia sesi√≥n en tu aplicaci√≥n para probar completamente\n');
    } else {
      console.log('‚úÖ Usuario verificado exitosamente');
      console.log(`   Email: ${user.email}`);
      console.log(`   ID: ${user.id}\n`);
    }
  } catch (err) {
    console.error('‚ùå ERROR CR√çTICO:', err.message);
    console.log('\nüî¥ ESTE ES EL MISMO ERROR QUE VES EN EL NAVEGADOR');
    console.log('');
    console.log('SOLUCIONES:');
    console.log('');
    console.log('1Ô∏è‚É£ Verifica tu archivo .env.local:');
    console.log('   - Debe estar en la ra√≠z del proyecto');
    console.log('   - Debe tener las variables NEXT_PUBLIC_SUPABASE_URL y KEY');
    console.log('   - NO debe tener espacios ni comillas extras');
    console.log('');
    console.log('2Ô∏è‚É£ Ve a tu dashboard de Supabase:');
    console.log('   https://supabase.com/dashboard/project/TU-PROYECTO/settings/api');
    console.log('   - Copia la "Project URL"');
    console.log('   - Copia la "anon public" key');
    console.log('');
    console.log('3Ô∏è‚É£ Verifica configuraci√≥n de CORS:');
    console.log('   En Supabase Dashboard ‚Üí Authentication ‚Üí URL Configuration');
    console.log('   Aseg√∫rate que http://localhost:3000 est√© en Site URL\n');
    return;
  }

  // ===== 6. VERIFICAR TABLA PRODUCTS =====
  console.log('6Ô∏è‚É£ Verificando acceso a tabla products...\n');
  
  try {
    const { data, error } = await supabase
      .from('products')
      .select('*')
      .limit(1);
    
    if (error) {
      console.error('‚ùå ERROR:', error.message);
      
      if (error.message.includes('policy')) {
        console.log('\nüí° SOLUCI√ìN: Faltan pol√≠ticas RLS (Row Level Security)');
        console.log('   Necesitas ejecutar el SQL para crear las pol√≠ticas\n');
      }
    } else {
      console.log('‚úÖ Acceso a tabla products OK');
      if (data && data.length > 0) {
        console.log(`   Productos encontrados: ${data.length}`);
      } else {
        console.log('   (La tabla est√° vac√≠a pero es accesible)');
      }
    }
  } catch (err) {
    console.error('‚ùå ERROR:', err.message);
  }

  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('‚úÖ DIAGN√ìSTICO COMPLETADO');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
}

// Ejecutar diagn√≥stico
diagnoseAuth()
  .then(() => {
    console.log('üí° Si el diagn√≥stico mostr√≥ errores, sigue las soluciones sugeridas.');
    console.log('üí° Despu√©s de hacer cambios, reinicia el servidor: npm run dev\n');
  })
  .catch((error) => {
    console.error('\n‚ùå ERROR FATAL:', error);
  });